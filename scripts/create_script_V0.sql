DO
$$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = 'rue_du_terroir') THEN
            CREATE DATABASE rue_du_terroir;
        END IF;
    END
$$;

DROP SCHEMA IF EXISTS AUTHENTICATION CASCADE;
CREATE SCHEMA IF NOT EXISTS AUTHENTICATION;

DROP SCHEMA IF EXISTS ASSOCIATION CASCADE;
CREATE SCHEMA IF NOT EXISTS ASSOCIATION;

------------------------------------------------------------
-- TABLE: T_R_ADDRESS_ADS
------------------------------------------------------------
CREATE SEQUENCE ASSOCIATION.T_R_ADDRESS_ADS_ID_SEQ;
CREATE TABLE ASSOCIATION.T_R_ADDRESS_ADS
(
    ADS_ID        SERIAL PRIMARY KEY,
    ADS_ENTRY     INT NOT NULL,
    ADS_FLOOR     INT NOT NULL,
    ADS_APARTMENT INT NOT NULL
);
ALTER SEQUENCE ASSOCIATION.T_R_ADDRESS_ADS_ID_SEQ OWNED BY ASSOCIATION.T_R_ADDRESS_ADS.ADS_ID;

------------------------------------------------------------
-- TABLE: T_R_ROLE_RLE
------------------------------------------------------------
CREATE SEQUENCE AUTHENTICATION.T_R_ROLE_RLE_ID_SEQ;
CREATE TABLE AUTHENTICATION.T_R_ROLE_RLE
(
    RLE_ID         INTEGER PRIMARY KEY,
    RLE_NAME       VARCHAR(20),
    RLE_CREATED_AT TIMESTAMP NOT NULL,
    RLE_UPDATED_AT TIMESTAMP NOT NULL
);

ALTER SEQUENCE AUTHENTICATION.T_R_ROLE_RLE_ID_SEQ OWNED BY AUTHENTICATION.T_R_ROLE_RLE.RLE_ID;

------------------------------------------------------------
-- TABLE: T_USER_USR
------------------------------------------------------------
CREATE TABLE ASSOCIATION.T_TENANT_TNT
(
    TNT_UUID        UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    TNT_CIVILITY    VARCHAR(20),
    TNT_FIRSTNAME   VARCHAR(30),
    TNT_LASTNAME    VARCHAR(40),
    TNT_EMAIL       VARCHAR(100) UNIQUE,
    TNT_PASSWORD VARCHAR(100) NOT NULL,
    TNT_OCCUPANTS   INT,
    TNT_PHONE       VARCHAR(10),
    TNT_GARAGE      INT,
    TNT_NBR_TENANT  VARCHAR(20),
    TNT_CREATED_AT  TIMESTAMP NOT NULL,
    TNT_UPDATED_AT  TIMESTAMP NOT NULL,
    TNT_IS_ARCHIVED BOOLEAN,
    TNT_IS_ENABLED  BOOLEAN,
    ADS_ID          INT,
    FOREIGN KEY (ADS_ID) REFERENCES ASSOCIATION.T_R_ADDRESS_ADS (ADS_ID)
);


------------------------------------------------------------
-- TABLE ASSOCIATIVE: T_ROLE_RLE_USR
------------------------------------------------------------
CREATE TABLE AUTHENTICATION.T_ROLE_RLE_USR
(
    TNT_UUID UUID NOT NULL,
    RLE_ID   INT  NOT NULL,
    PRIMARY KEY (TNT_UUID, RLE_ID),
    FOREIGN KEY (RLE_ID) REFERENCES AUTHENTICATION.T_R_ROLE_RLE (RLE_ID),
    FOREIGN KEY (TNT_UUID) REFERENCES ASSOCIATION.T_TENANT_TNT (TNT_UUID)
);

------------------------------------------------------------
-- TABLE: T_MEDIA_MED
------------------------------------------------------------
CREATE SEQUENCE ASSOCIATION.T_FILE_ID_SEQ;
CREATE TABLE ASSOCIATION.T_FILE_FLE
(
    FLE_ID         SERIAL PRIMARY KEY,
    FLE_LINK       VARCHAR,
    TNT_UUID UUID,
    FLE_CREATED_AT TIMESTAMP NOT NULL,
    FLE_UPDATED_AT TIMESTAMP NOT NULL,
    FLE_IS_ARCHIVED BOOLEAN,

    FOREIGN KEY (TNT_UUID) REFERENCES ASSOCIATION.T_TENANT_TNT (TNT_UUID)
);
ALTER SEQUENCE ASSOCIATION.T_FILE_ID_SEQ OWNED BY ASSOCIATION.T_FILE_FLE.FLE_ID;
